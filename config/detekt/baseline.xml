<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>FinalNewline:build.gradle.kts:1</ID>
    <ID>ForbiddenComment:build.gradle.kts$// TODO: the current compose binary surprises LLVM, so disable checks for now.</ID>
    <ID>FunctionNaming:Buttons.kt$@Composable fun org.chiachat.app.compose.shared.PrimaryTextButton(text: String,
      modifier: Modifier, onClick: () -&gt; Unit)</ID>
    <ID>FunctionNaming:Buttons.kt$@Composable fun org.chiachat.app.compose.shared.RoundedPrimaryButton( text: String,
      modifier: Modifier = Modifier, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:org.chiachat.app.compose.components.LandingComponent.kt$org.chiachat.app.compose.components.LandingComponent$@Composable fun LandingScreen()</ID>
    <ID>FunctionNaming:org.chiachat.app.compose.components.fan.auth.login.LoginComponent.kt$org.chiachat.app.compose.components.fan.auth.login.LoginComponent$@Composable
      fun LoginScreen()</ID>
    <ID>FunctionNaming:org.chiachat.app.compose.components.fan.auth.register.RegisterComponent.kt$org.chiachat.app.compose.components.fan.auth.register.RegisterComponent.Companion$@Composable
      fun RegisterScreen()</ID>
    <ID>MagicNumber:Buttons.kt$56</ID>
    <ID>MagicNumber:Color.kt$0xFF03DAC5</ID>
    <ID>MagicNumber:Color.kt$0xFF202020</ID>
    <ID>MagicNumber:Color.kt$0xFF3700B3</ID>
    <ID>MagicNumber:Color.kt$0xFF592EE5</ID>
    <ID>MagicNumber:Color.kt$0xFF6200EE</ID>
    <ID>MaxLineLength:Deps.kt$Deps.Compose$const val accompanistNavigationAnimation = "com.google.accompanist:accompanist-navigation-animation:${Versions.accompanist}"</ID>
    <ID>MaximumLineLength:Deps.kt:81</ID>
    <ID>MayBeConst:Deps.kt$Plugin.Id$val apollo = "com.apollographql.apollo3"</ID>
    <ID>MayBeConst:Deps.kt$Plugin.Id$val compose = "org.jetbrains.compose"</ID>
    <ID>MayBeConst:Deps.kt$Plugin.Id$val detekt = "io.gitlab.arturbosch.detekt"</ID>
    <ID>MayBeConst:Deps.kt$Plugin.Id$val junit5 = "de.mannodermaus.android-junit5"</ID>
    <ID>MayBeConst:Deps.kt$Plugin.Id$val kover = "org.jetbrains.kotlinx.kover"</ID>
    <ID>MayBeConst:Deps.kt$Plugin.Id$val ktlint = "org.jlleitschuh.gradle.ktlint"</ID>
    <ID>MayBeConst:Deps.kt$Plugin.Id$val mockmp = "org.kodein.mock.mockmp"</ID>
    <ID>MayBeConst:Deps.kt$Plugin.Id$val sqlDelight = "app.cash.sqldelight"</ID>
    <ID>MemberNameEqualsClassName:Greeting.kt$Greeting$fun greeting(): String</ID>
    <ID>MemberNameEqualsClassName:Platform.kt$Platform$actual val platform: String = "Android"</ID>
    <ID>MemberNameEqualsClassName:Platform.kt$Platform$actual val platform: String = "JS"</ID>
    <ID>MemberNameEqualsClassName:Platform.kt$Platform$actual val platform: String = UIDevice.currentDevice.systemName() + " " + UIDevice.currentDevice.systemVersion</ID>
    <ID>MemberNameEqualsClassName:Platform.kt$Platform$val platform: String</ID>
    <ID>NewLineAtEndOfFile:build.gradle.kts$.build.gradle.kts</ID>
    <ID>NoBlankLineBeforeRbrace:build.gradle.kts:45</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val checkAndDetekt by registering(io.gitlab.arturbosch.detekt.Detekt::class) { dependsOn("check") description = "Runs detekt static code analysis on all modules" buildUponDefaultConfig = true allRules = true parallel = true ignoreFailures = false setSource(files(projectDir)) include("**/*.kt") include("**/*.kts") exclude("**/resources/**") exclude("**/build/**") config.setFrom("$rootDir/config/detekt/detekt.yml") baseline.set(file("$rootDir/config/detekt/baseline.xml")) reports { html.required.set(true) xml.required.set(true) sarif.required.set(true) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val detektProjectBaseline by registering(io.gitlab.arturbosch.detekt.DetektCreateBaselineTask::class) { description = "Overrides current baseline." buildUponDefaultConfig.set(true) ignoreFailures.set(true) parallel.set(true) setSource(files(rootDir)) config.setFrom(files("$rootDir/config/detekt/detekt.yml")) baseline.set(file("$rootDir/config/detekt/baseline.xml")) include("**/*.kt") include("**/*.kts") exclude("**/resources/**") exclude("**/build/**") }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosMain by creating { dependsOn(commonMain) iosX64Main.dependsOn(this) iosArm64Main.dependsOn(this) iosSimulatorArm64Main.dependsOn(this) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosTest by creating { dependsOn(commonTest) iosX64Test.dependsOn(this) iosArm64Test.dependsOn(this) iosSimulatorArm64Test.dependsOn(this) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsMain by getting</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsTest by getting</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmMain by getting</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmTest by getting</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val uikitArm64Main by getting { dependsOn(uikitMain) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val uikitX64Main by getting { dependsOn(uikitMain) }</ID>
    <ID>VariableNaming:NavigationService.kt$NavigationService$private val currentScreen_: MutableState&lt;Component?&gt; = mutableStateOf(null)</ID>
    <ID>WildcardImport:Buttons.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:org.chiachat.app.compose.components.LandingComponent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:org.chiachat.app.compose.components.fan.auth.login.LoginComponent.kt$import
      androidx.compose.runtime.*</ID>
    <ID>WildcardImport:org.chiachat.app.web.main.uikit.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:org.chiachat.app.web.main.uikit.kt$import kotlinx.cinterop.*</ID>
    <ID>WildcardImport:org.chiachat.app.web.main.uikit.kt$import platform.Foundation.*</ID>
    <ID>WildcardImport:org.chiachat.app.web.main.uikit.kt$import platform.UIKit.*</ID>
  </CurrentIssues>
</SmellBaseline>
